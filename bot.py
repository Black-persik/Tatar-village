import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from main import DatabaseManager
from config import API_TOKEN, DATABASE_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager(DATABASE_URL)

# –ü–∞–ø–∫–∏ –¥–ª—è –º–µ–¥–∏–∞
VOICES_DIR = "voices"
IMAGES_DIR = "images"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(VOICES_DIR, exist_ok=True)
os.makedirs(IMAGES_DIR, exist_ok=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_telegram_id_async(user_id)
    if not user:
        await db.create_user_async(user_id, user_name)

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/voice - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                         "/image - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                         "/model - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ML –º–æ–¥–µ–ª—å—é\n"
                         "/stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(Command("voice"))
async def send_voice(message: types.Message):
    voice_path = os.path.join(VOICES_DIR, "example.ogg")
    try:
        voice = FSInputFile(voice_path)
        await message.answer_voice(voice=voice)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        logging.error(e)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message(Command("image"))
async def send_image(message: types.Message):
    image_path = os.path.join(IMAGES_DIR, "example.jpg")
    try:
        photo = FSInputFile(image_path)
        await message.answer_photo(photo=photo)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        logging.error(e)


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("stats"))
async def user_stats(message: types.Message):
    user_id = message.from_user.id
    stats = await db.get_user_stats_async(user_id)

    if stats:
        response = (f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {stats['total_solved']}\n"
                    f"–û–±—â–∏–π —Å—á–µ—Ç: {stats['total_score']}")
        await message.answer(response)
    else:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ML –º–æ–¥–µ–ª–∏
async def process_with_model(text: str):
    return f"–ú–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ç–µ–∫—Å—Ç: {text}"


# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥–µ–ª—å—é
@dp.message(Command("model"))
async def model_interaction(message: types.Message):
    user_text = message.text.replace('/model', '').strip()
    if not user_text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /model")
        return

    response = await process_with_model(user_text)
    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def echo_message(message: types.Message):
    await message.answer("–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

import os
import logging
import asyncio
import random
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from main import DatabaseManager
from config import API_TOKEN, DATABASE_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager(DATABASE_URL)

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
VOICES_DIR = os.path.join(BASE_DIR, "voices")
IMAGES_DIR = os.path.join(BASE_DIR, "images")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(VOICES_DIR, exist_ok=True)
os.makedirs(IMAGES_DIR, exist_ok=True)

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
WELCOME_IMAGE = os.path.join(IMAGES_DIR, "welcome.jpg")
TEA_IMAGE = os.path.join(IMAGES_DIR, "tea.jpg")
GAMES_IMAGE = os.path.join(IMAGES_DIR, "games.jpg")
SLEEP_IMAGE = os.path.join(IMAGES_DIR, "sleep.jpg")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
for img_path in [WELCOME_IMAGE, TEA_IMAGE, GAMES_IMAGE, SLEEP_IMAGE]:
    if not os.path.exists(img_path):
        logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {img_path}")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DayScenario(StatesGroup):
    waiting_action = State()
    waiting_phrase_response = State()
    waiting_for_answer = State()
    waiting_text_response = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏–∑ –≤—Å–µ—Ö –≥–ª–∞–≤
FULL_DICTIONARY = {
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ": {
        "—Ä”ô—Ö–∏–º –∏—Ç(–µ–≥–µ–∑)": "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å/—É–≥–æ—â–∞–π—Ç–µ—Å—å (–≤–µ–∂–ª. –º–Ω. —á.)",
        "”ô–π–¥”ô": "–¥–∞–≤–∞–π/–ø—Ä–æ—à—É",
        "–º–µ–Ω”ô": "–≤–æ—Ç/–≤–æ—Ç –æ–Ω",
        "—á”ô–π": "—á–∞–π",
        "—á”ô–∫-—á”ô–∫": "—á–∞–∫-—á–∞–∫",
        "–±–µ–ª”ô–Ω": "—Å/—Å–æ",
        "—É—Ç—ã—Ä—ã–≥—ã–∑": "—Å–∞–¥–∏—Ç–µ—Å—å (–≤–µ–∂–ª.)",
        "—ç—á”ô—Ä—Å–µ–∑–º–µ? / —ç—á–µ–≥–µ–∑": "–±—É–¥–µ—Ç–µ –ø–∏—Ç—å? / –ø–µ–π—Ç–µ (–≤–µ–∂–ª.)",
        "—Ç—ã–Ω—á, –º–∞—Ç—É—Ä": "—Å–ø–æ–∫–æ–π–Ω—ã–π, –∫—Ä–∞—Å–∏–≤—ã–π",
        "–∏—Å”ô–Ω–º–µ": "–ø—Ä–∏–≤–µ—Ç",
        "–∫—É–Ω–∞–∫": "–≥–æ—Å—Ç—å",
        "–∞–≤—ã–ª": "–¥–µ—Ä–µ–≤–Ω—è",
        "—Ç“Ø—Ä": "–¥–æ–º",
        "—É–∑": "–ø—Ä–æ—Ö–æ–¥–∏",
        "–∫–∞–π–Ω–∞—Ä": "–≥–æ—Ä—è—á–∏–π",
        "–∫–∏—á–ª”ô—Ä–µ–Ω": "–≤–µ—á–µ—Ä–∞–º–∏",
        "“ó—ã—Ä–ª—ã–π–±—ã–∑": "–ø–æ—ë–º"
    },
    "–ï–¥–∞": {
        "–∫—É–Ω–∞–∫ –∫“Ø“£–µ–ª–µ": "–¥—É—à–∞ –≥–æ—Å—Ç—è",
        "–º”ô–π–¥–∞–Ω": "–ø–ª–æ—â–∞–¥—å (–∑–¥–µ—Å—å: —à–∏—Ä–æ–∫–∏–π, –∂–µ–ª–∞–Ω–Ω—ã–π)",
        "—Ç—É–π–≥–∞–Ω –∫”©–Ω": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
        "—Ç—É–π–¥—ã—Ä–º—ã–π—á–∞": "–Ω–µ –Ω–∞–∫–æ—Ä–º–∏–≤",
        "“ó–∏–±”ô—Ä–º”ô—Å–ª”ô—Ä": "–Ω–µ –æ—Ç–ø—É—Å—Ç—è—Ç",
        "—Ç–∞–±—ã–Ω": "—Å—Ç–æ–ª",
        "–º–∏–ª–ª–∏ –ø–µ—à–µ—Ä–º": "–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤—ã–ø–µ—á–∫–∞",
        "”©—á–ø–æ—á–º–∞–∫": "—ç—á–ø–æ—á–º–∞–∫ (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)",
        "–∫—ã—Å—Ç—ã–±—ã–π": "–∫—ã—Å—Ç—ã–±—ã–π (–ª–µ–ø–µ—à–∫–∞ —Å –Ω–∞—á–∏–Ω–∫–æ–π)",
        "–∫”ô–±”ô—Å—Ç”ô": "–∫–∞–±”ô—Ä—Ç–º”ô (–∂–∞—Ä–µ–Ω—ã–π –ø–∏—Ä–æ–∂–æ–∫)",
        "—Ç”ô–º–ª–µ –±—É–ª—Å—ã–Ω": "–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞",
        "–∞–ª–∞—Å—ã–∑–º—ã": "–±—É–¥–µ—Ç–µ –±—Ä–∞—Ç—å?",
        "—Ä”ô—Ö–º”ô—Ç": "—Å–ø–∞—Å–∏–±–æ",
        "—Ç”ô–º–ª–µ": "–≤–∫—É—Å–Ω–æ",
        "”ô–π–±”ô—Ç": "—Ö–æ—Ä–æ—à–æ",
        "”ô–ª–µ": "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (–º—è–≥–∫–æ–µ)",
        "–∫–æ–µ–≥—ã–∑": "–Ω–∞–ª–∏–≤–∞–π—Ç–µ",
        "–±–µ—Ä–∞–∑": "–Ω–µ–º–Ω–æ–≥–æ",
        "–≥—ã–Ω–∞": "—Ç–æ–ª—å–∫–æ",
        "—Ç–∞–≥—ã–Ω": "–µ—â–µ",
        "–∞–ª—ã—Ä–≥–∞": "–±—Ä–∞—Ç—å",
        "–º”©–º–∫–∏–Ω–º–µ": "–º–æ–∂–Ω–æ –ª–∏"
    },
    "–í–µ—á–µ—Ä–Ω–∏–µ –∏–≥—Ä—ã": {
        "–∫–∏—á": "–≤–µ—á–µ—Ä",
        "–∫–æ—è—à –±–∞–π–¥—ã": "—Å–æ–ª–Ω—Ü–µ —Å–µ–ª–æ",
        "—É—Ä–∞–º": "—É–ª–∏—Ü–∞",
        "—á—ã–≥–∞–±—ã–∑": "–≤—ã—Ö–æ–¥–∏–º",
        "–∫“Ø—Ä—à–µ": "—Å–æ—Å–µ–¥—Å–∫–∏–π",
        "–±–∞–ª–∞–ª–∞—Ä": "–¥–µ—Ç–∏",
        "—É–π–Ω—ã–π–±—ã–∑": "–∏–≥—Ä–∞–µ–º",
        "—É–µ–Ω–Ω–∞—Ä": "–∏–≥—Ä—ã",
        "—É–π–Ω–∞—Ä—Å—ã“£–º—ã": "–±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å"
    },
    "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è": {
        "–±“Ø–≥–µ–Ω": "—Å–µ–≥–æ–¥–Ω—è",
        "–∫“Ø“£–µ–ª–ª–µ": "–≤–µ—Å–µ–ª–æ",
        "–∫–∏–ª”ô—Å–µ —Ç–∞–ø–∫—ã—Ä": "–≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑",
        "–∫–∏–ª–µ—Ä—Å–µ“£": "–ø—Ä–∏–µ–¥–µ—à—å",
        "—Ö”ô–µ—Ä–ª–µ –∫–∏—á": "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä/—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏",
        "—Ç”©—à–∫”ô —á–∞–∫–ª—ã": "–¥–æ –æ–±–µ–¥–∞",
        "—Å–∞—É –±—É–ª": "–±—É–¥—å –∑–¥–æ—Ä–æ–≤",
        "–π–æ–∫—ã": "—Å–æ–Ω",
        "—Ç”ô–º–ª–µ –±—É–ª—Å—ã–Ω": "–ø—É—Å—Ç—å –±—É–¥–µ—Ç –≤–∫—É—Å–Ω—ã–º (—Å–ª–∞–¥–∫–∏–º)"
    }
}

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≥–ª–∞–≤–∞ —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
CHAPTERS = {
    "chapter1": {
        "title": "–ì–ª–∞–≤–∞ 1: –ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Ç–∞—Ç–∞—Ä—Å–∫—É—é –∫—É–ª—å—Ç—É—Ä—É",
        "character": "”ò–±–∏ “ª”ô–º –ë–∞–±–∞–π",
        "parts": [
            {
                "name": "–ß–∞—Å—Ç—å 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                "type": "info",
                "image": WELCOME_IMAGE,
                "text_tatar": "–ò—Å”ô–Ω–º–µ, –∫—É–Ω–∞–∫! –ë–µ–∑–Ω–µ“£ –∞–≤—ã–ª–≥–∞ —Ä”ô—Ö–∏–º –∏—Ç! ”ò–π–¥”ô, —Ç“Ø—Ä–¥”ô–Ω —É–∑. –ú–µ–Ω”ô –∫–∞–π–Ω–∞—Ä —á”ô–π, —á”ô–∫-—á”ô–∫ –±–µ–ª”ô–Ω. –ß”ô–π —ç—á”ô—Ä—Å–µ–∑–º–µ? –£—Ç—ã—Ä—ã–≥—ã–∑, —Ä”ô—Ö–∏–º –∏—Ç–µ–≥–µ–∑! –ë–µ–∑–Ω–µ“£ –∞–≤—ã–ª —Ç—ã–Ω—ã—á “ª”ô–º –º–∞—Ç—É—Ä. –ö–∏—á–ª”ô—Ä–µ–Ω –±–µ–∑ “ó—ã—Ä–ª—ã–π–±—ã–∑.",
                "text_russian": "–ü—Ä–∏–≤–µ—Ç, –≥–æ—Å—Ç—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –¥–µ—Ä–µ–≤–Ω—é! –ü—Ä–æ—Ö–æ–¥–∏ –≤ –¥–æ–º. –í–æ—Ç –≥–æ—Ä—è—á–∏–π —á–∞–π —Å —á–∞–∫-—á–∞–∫–æ–º. –ë—É–¥–µ—Ç–µ —á–∞–π? –ü—Ä–∏—Å–∞–∂–∏–≤–∞–π—Ç–µ—Å—å, —É–≥–æ—â–∞–π—Ç–µ—Å—å! –£ –Ω–∞—Å –≤ –¥–µ—Ä–µ–≤–Ω–µ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –∫—Ä–∞—Å–∏–≤–æ. –í–µ—á–µ—Ä–∞–º–∏ –º—ã –ø–æ—ë–º –ø–µ—Å–Ω–∏.",
                "explanation": "–¢–∞—Ç–∞—Ä—Å–∫–æ–µ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ –∏–∑–≤–µ—Å—Ç–Ω–æ - –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –≥–æ—Å—Ç–µ–π –∏ —É–≥–æ—Å—Ç–∏—Ç—å –∏—Ö –ª—É—á—à–∏–º, —á—Ç–æ –µ—Å—Ç—å –≤ –¥–æ–º–µ.",
                "next_button_text": "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å",
            },
            {
                "name": "–ß–∞—Å—Ç—å 2: –ó–∞–¥–∞–Ω–∏–µ 2.1",
                "type": "multiple_choice",
                "text_tatar": "",
                "text_russian": "",
                "explanation": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–∂–ª–∏–≤—É—é —Ñ—Ä–∞–∑—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:",
                "question": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–∂–ª–∏–≤—É—é —Ñ—Ä–∞–∑—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:",
                "options": [
                    {"text": "–†”ô—Ö–∏–º –∏—Ç–µ–≥–µ–∑!", "correct": True,
                     "response": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –≤–µ–∂–ª–∏–≤–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."},
                    {"text": "–ß”ô–π —ç—á”ô—Å–µ“£?", "correct": False,
                     "response": "–ù–µ —Å–æ–≤—Å–µ–º. –≠—Ç–æ –º–µ–Ω–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."},
                    {"text": "–ß”ô–π —ç—á!", "correct": False,
                     "response": "–ù–µ—Ç, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≥–æ—Å—Ç—è."}
                ],
                "image": TEA_IMAGE
            },
            {
                "name": "–ß–∞—Å—Ç—å 3: –ó–∞–¥–∞–Ω–∏–µ 2.2",
                "type": "phrase_building",
                "text_tatar": "",
                "text_russian": "",
                "explanation": "–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞:",
                "hint": "–¢–æ–∫–µ–Ω—ã: –∏—Ç–µ–≥–µ–∑ ¬∑ —á”ô–π ¬∑ —Ä”ô—Ö–∏–º ¬∑ –ú–µ–Ω”ô",
                "correct_phrases": ["–ú–µ–Ω”ô —á”ô–π, —Ä”ô—Ö–∏–º –∏—Ç–µ–≥–µ–∑!", "–ú–µ–Ω”ô —á”ô–π —Ä”ô—Ö–∏–º –∏—Ç–µ–≥–µ–∑"],
                "response": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã —Å–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–µ–∂–ª–∏–≤—É—é —Ñ—Ä–∞–∑—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
                "image": TEA_IMAGE
            },
            {
                "name": "–ß–∞—Å—Ç—å 4: –ó–∞–¥–∞–Ω–∏–µ 2.3",
                "type": "text_response",
                "text_tatar": "",
                "text_russian": "",
                "explanation": "–°–∫–∞–∂–∏—Ç–µ ¬´–ù–∞–ª–µ–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å.¬ª –ø–æ-—Ç–∞—Ç–∞—Ä—Å–∫–∏:",
                "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–æ '”ô–ª–µ' (–º—è–≥–∫–æ–µ ¬´–ø–æ–∂–∞–ª—É–π—Å—Ç–∞¬ª) –∏ –ª–µ–∫—Å–∏–∫—É –∏–∑ —Å—Ü–µ–Ω—ã.",
                "correct_responses": ["”ò–ª–µ –±–µ—Ä–∞–∑ –≥—ã–Ω–∞ –∫–æ–µ–≥—ã–∑", "”ò–ª–µ –±–µ—Ä–∞–∑ –≥—ã–Ω–∞", "”ò–ª–µ –±–µ—Ä–∞–∑ –∫—ã–Ω–∞ –∫–æ–µ–≥—ã–∑"],
                "response": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ë–∞–±—É—à–∫–∞ –Ω–∞–ª—å–µ—Ç –≤–∞–º —á—É—Ç—å-—á—É—Ç—å —á–∞—è.",
                "image": TEA_IMAGE
            },
            {
                "name": "–ß–∞—Å—Ç—å 5: –î–∏–∞–ª–æ–≥ —Å –ë–∞–±–∞–µ–º",
                "type": "text_response",
                "text_tatar": "–ë–∞–±–∞–π: –†”ô—Ö–∏–º –∏—Ç–µ–≥–µ–∑, —á”ô–π —ç—á–µ–≥–µ–∑!",
                "text_russian": "–î–µ–¥—É—à–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ–π—Ç–µ —á–∞–π!",
                "explanation": "–û—Ç–≤–µ—Ç—å—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –∏ –æ—Ü–µ–Ω–∏—Ç–µ –≤–∫—É—Å:",
                "hint": "–°–∫–∞–∂–∏—Ç–µ '—Å–ø–∞—Å–∏–±–æ' –∏ '–≤–∫—É—Å–Ω–æ' –ø–æ-—Ç–∞—Ç–∞—Ä—Å–∫–∏",
                "correct_responses": ["–†”ô—Ö–º”ô—Ç, –±–∏–∫ —Ç”ô–º–ª–µ", "–†”ô—Ö–º”ô—Ç, –±–∏–∫ ”ô–π–±”ô—Ç"],
                "response": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ë–∞–±–∞–π –¥–æ–≤–æ–ª–µ–Ω –≤–∞—à–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é.",
                "image": TEA_IMAGE
            },
            {
                "name": "–ß–∞—Å—Ç—å 6: –î–∏–∞–ª–æ–≥ —Å ”ò–±–∏",
                "type": "text_response",
                "text_tatar": "”ò–±–∏: –ú–µ–Ω”ô —á”ô–∫-—á”ô–∫. –ê–ª–∞—Å—ã–∑–º—ã?",
                "text_russian": "–ë–∞–±—É—à–∫–∞: –í–æ—Ç —á–∞–∫-—á–∞–∫. –ë—É–¥–µ—Ç–µ?",
                "explanation": "–í–µ–∂–ª–∏–≤–æ –ø—Ä–∏–º–∏—Ç–µ —É–≥–æ—â–µ–Ω–∏–µ:",
                "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–º–µ–Ω”ô', '—Ä”ô—Ö–∏–º –∏—Ç–µ–≥–µ–∑' –∏–ª–∏ '–±–µ–ª”ô–Ω'",
                "correct_responses": ["–ú–µ–Ω”ô —á”ô–∫-—á”ô–∫, —Ä”ô—Ö–∏–º –∏—Ç–µ–≥–µ–∑", "–†”ô—Ö–∏–º –∏—Ç–µ–≥–µ–∑, —á”ô–∫-—á”ô–∫ –±–µ–ª”ô–Ω"],
                "response": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –≤–µ–∂–ª–∏–≤–æ –ø—Ä–∏–Ω—è–ª–∏ —É–≥–æ—â–µ–Ω–∏–µ.",
                "image": TEA_IMAGE
            },
            {
                "name": "–ß–∞—Å—Ç—å 7: –ü—Ä–æ—Å—å–±–∞",
                "type": "text_response",
                "text_tatar": "",
                "text_russian": "",
                "explanation": "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —á—É—Ç—å-—á—É—Ç—å —á–∞—è:",
                "hint": "–°–ø—Ä–æ—Å–∏—Ç–µ '–ú–æ–∂–Ω–æ –µ—â–µ —á—É—Ç—å-—á—É—Ç—å —á–∞—è?' –ø–æ-—Ç–∞—Ç–∞—Ä—Å–∫–∏",
                "correct_responses": ["–¢–∞–≥—ã–Ω –±–µ—Ä–∞–∑ —á”ô–π –∞–ª—ã—Ä–≥–∞ –º”©–º–∫–∏–Ω–º–µ?", "–¢–∞–≥—ã–Ω –±–µ—Ä–∞–∑ —á”ô–π –º”©–º–∫–∏–Ω–º–µ?"],
                "response": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ë–∞–±—É—à–∫–∞ –Ω–∞–ª–∏–ª–∞ –≤–∞–º –µ—â–µ —á–∞—é.",
                "image": TEA_IMAGE
            },
            {
                "name": "–ß–∞—Å—Ç—å 8: –í–µ—á–µ—Ä–Ω–∏–µ –∏–≥—Ä—ã",
                "type": "info",
                "text_tatar": "–ö–∏—á –±—É–ª–¥—ã. –ö–æ—è—à –±–∞–π–¥—ã. ”ò–π–¥”ô, —É—Ä–∞–º–≥–∞ —á—ã–≥–∞–±—ã–∑. –ö“Ø—Ä—à–µ –±–∞–ª–∞–ª–∞—Ä –±–µ–ª”ô–Ω —É–π–Ω—ã–π–±—ã–∑. –£–π–Ω–∞—Ä—Å—ã“£–º—ã?",
                "text_russian": "–ù–∞—Å—Ç—É–ø–∏–ª –≤–µ—á–µ—Ä. –°–æ–ª–Ω—Ü–µ —Å–µ–ª–æ. –î–∞–≤–∞–π –≤—ã–π–¥–µ–º –Ω–∞ —É–ª–∏—Ü—É. –ü–æ–∏–≥—Ä–∞–µ–º —Å —Å–æ—Å–µ–¥—Å–∫–∏–º–∏ –¥–µ—Ç—å–º–∏. –ë—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å?",
                "explanation": "–í–µ—á–µ—Ä–∞–º–∏ –≤ —Ç–∞—Ç–∞—Ä—Å–∫–∏—Ö –¥–µ—Ä–µ–≤–Ω—è—Ö –¥–µ—Ç–∏ —á–∞—Å—Ç–æ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ –¥–ª—è –∏–≥—Ä –Ω–∞ —É–ª–∏—Ü–µ.",
                "next_button_text": "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                "image": GAMES_IMAGE
            },
            {
                "name": "–ß–∞—Å—Ç—å 9: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è",
                "type": "info",
                "text_tatar": "–ë“Ø–≥–µ–Ω –±–∏–∫ –∫“Ø“£–µ–ª–ª–µ –±—É–ª–¥—ã. –ö–∏—á –±–µ–ª”ô–Ω —Å–∞—É –±—É–ª! –ô–æ–∫—ã–≥—ã–∑ —Ç”ô–º–ª–µ –±—É–ª—Å—ã–Ω. –ö–∏–ª–µ—Ä—Å–µ“£ ”ô–ª–µ?",
                "text_russian": "–°–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ. –î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ü—É—Å—Ç—å –≤–∞—à —Å–æ–Ω –±—É–¥–µ—Ç —Å–ª–∞–¥–∫–∏–º. –¢—ã –µ—â—ë –ø—Ä–∏–µ–¥–µ—à—å?",
                "explanation": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–æ–±—Ä–æ–π –Ω–æ—á–∏ –∏ —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ –≤ —Ç–∞—Ç–∞—Ä—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–µ.",
                "next_button_text": "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–ª–∞–≤—É",
                "image": SLEEP_IMAGE
            }
        ]
    }
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat API
def get_llm_response(question: str, user_answer: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GigaChat API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': 'b15dc234-3503-40d5-ac09-c25453176832',
        'Authorization': 'Basic N2NlY2E4NjMtYjFhMi00N2MxLTkwYjAtNzc3NjVmOWVkY2U5OjA3OGE1NGEzLTRlMjctNDMzMi05N2VlLWEyMWVkMzk5OTMyNQ=='
    }
    payload = {
        'scope': 'GIGACHAT_API_PERS'
    }

    try:
        response_for_token = requests.post(url, headers=headers, data=payload, verify=False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
        if response_for_token.status_code != 200:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

        access_token = response_for_token.json()['access_token']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
        system_prompt = f"""–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –¥–æ–±—Ä–∞—è –∏ –≤–µ–∂–ª–∏–≤–∞—è –±–∞–±—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≥–æ–≤–æ—Ä–∏—Ç –¢–û–õ–¨–ö–û –ü–û-–†–£–°–°–ö–ò!!!.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å: '{question}'
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: '{user_answer}'
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø–æ—Ö–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –ø–æ —Ç–µ–º–µ - –≤–µ–∂–ª–∏–≤–æ —É–∫–∞–∂–∏ –Ω–∞ –µ–≥–æ –æ—à–∏–±–∫–∏.
        –ë—É–¥—å –¥–æ–±—Ä–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π. –ù–ï –û–¢–í–ï–ß–ê–ô –ü–û_–¢–ê–¢–ê–†–°–ö–ò!!!
        –û—Ç–≤–µ—á–∞–π —Å–ø–ª–æ—à–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º - –Ω–µ –æ—Ç–≤–µ—á–∞–π –ø–æ –ø—É–Ω–∫—Ç–∞–º.
        –û—Ç–≤–µ—á–∞–π –Ω–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –°—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ
        –í—ã–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É!
        """

        url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {access_token}"
        }

        payload = {
            "model": "GigaChat",
            "messages": [
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": f"–û—Ç–≤–µ—Ç: '{user_answer}'"
                }
            ],
            "temperature": 0.7,
            "max_tokens": 500
        }

        resp = requests.post(url, headers=headers, json=payload, verify=False, timeout=30)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if resp.status_code != 200:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞."

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        answer = resp.json()['choices'][0]['message']['content']

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∞—Ç–∞—Ä—Å–∫–∏–π
        try:
            from gradio_client import Client
            client = Client("https://v2.api.translate.tatar/")
            total_answer = client.predict(
                lang="rus2tat",
                text=answer,
                api_name="/translate_interface"
            )
            return total_answer
        except:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            return f"–†—É—Å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: {answer}\n\n(–ü–µ—Ä–µ–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_telegram_id_async(user_id)
    if not user:
        await db.create_user_async(user_id, user_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="show_main_menu")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(WELCOME_IMAGE):
        try:
            photo = FSInputFile(WELCOME_IMAGE)
            await message.answer_photo(photo,
                                       caption=f"–°”ô–ª–∞–º, {user_name}! –ú–∏–Ω —Ç–∞—Ç–∞—Ä —Ç–µ–ª–µ–Ω ”©–π—Ä”ô–Ω“Ø –±—É–µ–Ω—á–∞ —è—Ä–¥”ô–º—á–∏ –±–æ—Ç–º—ã–Ω.\n\n"
                                               "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–º –≤—Ä–µ–º—è –≤ —Ç–∞—Ç–∞—Ä—Å–∫–æ–π –¥–µ—Ä–µ–≤–Ω–µ —Å –±–∞–±—É—à–∫–æ–π –∏ –¥–µ–¥—É—à–∫–æ–π!",
                                       reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer(
                f"–°”ô–ª–∞–º, {user_name}! –ú–∏–Ω —Ç–∞—Ç–∞—Ä —Ç–µ–ª–µ–Ω ”©–π—Ä”ô–Ω“Ø –±—É–µ–Ω—á–∞ —è—Ä–¥”ô–º—á–∏ –±–æ—Ç–º—ã–Ω.\n\n"
                "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–º –≤—Ä–µ–º—è –≤ —Ç–∞—Ç–∞—Ä—Å–∫–æ–π –¥–µ—Ä–µ–≤–Ω–µ —Å –±–∞–±—É—à–∫–æ–π –∏ –¥–µ–¥—É—à–∫–æ–π!",
                reply_markup=keyboard
            )
    else:
        await message.answer(
            f"–°”ô–ª–∞–º, {user_name}! –ú–∏–Ω —Ç–∞—Ç–∞—Ä —Ç–µ–ª–µ–Ω ”©–π—Ä”ô–Ω“Ø –±—É–µ–Ω—á–∞ —è—Ä–¥”ô–º—á–∏ –±–æ—Ç–º—ã–Ω.\n\n"
            "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–º –≤—Ä–µ–º—è –≤ —Ç–∞—Ç–∞—Ä—Å–∫–æ–π –¥–µ—Ä–µ–≤–Ω–µ —Å –±–∞–±—É—à–∫–æ–π –∏ –¥–µ–¥—É—à–∫–æ–π!",
            reply_markup=keyboard
        )


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(F.data == "show_main_menu")
async def show_main_menu(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ì–ª–∞–≤—ã", callback_data="chapters_menu")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")]
    ])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –≥–ª–∞–≤
@dp.callback_query(F.data == "chapters_menu")
async def chapters_menu_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–ª–∞–≤–∞ 1: –ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ", callback_data="chapter_1")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_main_menu")]
    ])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤
@dp.callback_query(F.data == "chapter_1")
async def chapter_1_callback(callback: types.CallbackQuery, state: FSMContext):
    await start_chapter(callback, state, "chapter1")


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≥–ª–∞–≤—ã
async def start_chapter(callback: types.CallbackQuery, state: FSMContext, chapter_key):
    await callback.message.edit_reply_markup(reply_markup=None)
    chapter = CHAPTERS[chapter_key]
    await callback.message.answer(f"–ù–∞—á–∏–Ω–∞–µ–º {chapter['title'].lower()}! üìñ")
    await state.set_state(DayScenario.waiting_for_answer)
    await state.update_data(
        current_chapter=chapter_key,
        current_part=0,
        score=0,
        correct_answers=0,
        total_questions=0,
        shown_images=set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    )
    await send_chapter_content(callback.message, chapter, 0, state)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —á–∞—Å—Ç–∏ –≥–ª–∞–≤—ã
async def send_chapter_content(message: types.Message, chapter, part_index, state: FSMContext):
    part = chapter["parts"][part_index]
    data = await state.get_data()
    shown_images = data.get("shown_images", set())

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç–∏–ø–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    await state.update_data(current_question_type=part.get("type", "multiple_choice"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
    image_path = part.get("image")
    if image_path and os.path.exists(image_path) and image_path not in shown_images:
        try:
            photo = FSInputFile(image_path)
            await message.answer_photo(photo)
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö
            shown_images.add(image_path)
            await state.update_data(shown_images=shown_images)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    response = f"üëµüë¥ {chapter['character']} - {part['name']}:\n\n"

    if part["text_tatar"]:
        response += f"üáπüá≥ {part['text_tatar']}\n\n"
    if part["text_russian"]:
        response += f"üá∑üá∫ {part['text_russian']}\n\n"
    if part["explanation"]:
        response += f"üí° {part['explanation']}\n\n"

    # –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
    if part["type"] == "info":
        keyboard_buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å" —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
        if part_index == 0:
            keyboard_buttons.append(
                [InlineKeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å", callback_data="show_dictionary_from_info")])

        keyboard_buttons.append([InlineKeyboardButton(text=part["next_button_text"], callback_data="next_part")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer(response, reply_markup=keyboard)

    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    elif part["type"] == "multiple_choice":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=option["text"], callback_data=f"answer_{i}")]
            for i, option in enumerate(part["options"])
        ])
        response += f"‚ùì {part['question']}"
        await message.answer(response, reply_markup=keyboard)

    # –î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    elif part["type"] in ["phrase_building", "text_response"]:
        if "hint" in part:
            response += f"üí° {part['hint']}\n\n"
        await message.answer(response)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await state.set_state(DayScenario.waiting_text_response)
        await state.update_data(current_part=part_index)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤)
@dp.callback_query(F.data == "next_part")
async def next_part_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_chapter = data.get("current_chapter")
    current_part = data.get("current_part", 0) + 1
    chapter = CHAPTERS[current_chapter]

    if current_part < len(chapter["parts"]):
        await state.update_data(current_part=current_part)
        await callback.message.edit_reply_markup(reply_markup=None)
        await send_chapter_content(callback.message, chapter, current_part, state)
    else:
        await finish_chapter(callback, state, chapter)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–æ–≤–∞—Ä—è –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
@dp.callback_query(F.data == "show_dictionary_from_info")
async def show_dictionary_from_info(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
    data = await state.get_data()
    current_chapter = data.get("current_chapter")
    current_part = data.get("current_part", 0)
    chapter = CHAPTERS[current_chapter]
    part = chapter["parts"][current_part]

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"  # –î–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
    words = FULL_DICTIONARY.get(category, {})

    dictionary_text = f"üìñ <b>{category}</b>\n\n"
    dictionary_text += "\n".join([f"‚Ä¢ <b>{key}</b> - {value}" for key, value in words.items()])

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        f"üìö –°–ª–æ–≤–∞—Ä—å –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É:\n\n{dictionary_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data="back_to_lesson")]
        ])
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∫ —É—Ä–æ–∫—É
@dp.callback_query(F.data == "back_to_lesson")
async def back_to_lesson_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_chapter = data.get("current_chapter")
    current_part = data.get("current_part", 0)
    chapter = CHAPTERS[current_chapter]

    await callback.message.edit_reply_markup(reply_markup=None)
    await send_chapter_content(callback.message, chapter, current_part, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
@dp.message(DayScenario.waiting_text_response)
async def handle_text_response(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_chapter = data.get("current_chapter")
    current_part = data.get("current_part", 0)
    chapter = CHAPTERS[current_chapter]
    part = chapter["parts"][current_part]
    user_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
    is_correct = False
    feedback = ""

    if part["type"] == "phrase_building":
        # –î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        is_correct = any(phrase.lower() in user_text.lower() for phrase in part["correct_phrases"])
        if not is_correct:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            question = f"–°–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—É: {part['hint']}"
            feedback = await asyncio.to_thread(get_llm_response, question, user_text)

    elif part["type"] == "text_response":
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        is_correct = any(resp.lower() in user_text.lower() for resp in part["correct_responses"])
        if not is_correct:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            question = f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ—Ä–∞–∑—É: {part.get('text_tatar', '')} - {part.get('explanation', '')}"
            feedback = await asyncio.to_thread(get_llm_response, question, user_text)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_questions = data.get("total_questions", 0) + 1
    correct_answers = data.get("correct_answers", 0)
    score = data.get("score", 0)

    if is_correct:
        score += 5
        correct_answers += 1
        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +5 –±–∞–ª–ª–æ–≤\n\n{part['response']}")

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id
        user = await db.get_user_by_telegram_id_async(user_id)
        if user:
            await db.increment_user_score_async(user[0], 5)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç LLM
        if feedback:
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n{feedback}")
        else:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏, –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        return

    await state.update_data(score=score, correct_answers=correct_answers, total_questions=total_questions)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
    next_part = current_part + 1
    if next_part < len(chapter["parts"]):
        await state.update_data(current_part=next_part)
        await asyncio.sleep(1)
        await send_chapter_content(message, chapter, next_part, state)
    else:
        await finish_chapter(message, state, chapter)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–ª–∞–≤—ã
async def finish_chapter(message, state: FSMContext, chapter):
    data = await state.get_data()
    correct_answers = data.get("correct_answers", 0)
    total_questions = data.get("total_questions", 0)
    score = data.get("score", 0)

    success_rate = (correct_answers / total_questions * 100) if total_questions > 0 else 0

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    user = await db.get_user_by_telegram_id_async(user_id)
    stats = await db.get_user_stats_async(user_id) if user else None

    await message.answer(
        f"üéâ {chapter['title']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{total_questions}\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n"
        f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: {score}\n"
        f"‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: {stats['total_score'] if stats else 0}\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–∑—É—á–∞–ª–∏ —Ç–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫ —Å –Ω–∞–º–∏!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥–ª–∞–≤—É", callback_data="chapters_menu")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
        ])
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –≥–ª–∞–≤–µ (–¥–ª—è multiple_choice)
@dp.callback_query(DayScenario.waiting_for_answer, F.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_chapter = data.get("current_chapter")
    current_part = data.get("current_part", 0)
    chapter = CHAPTERS[current_chapter]
    part = chapter["parts"][current_part]

    option_index = int(callback.data.split("_")[1])
    option = part["options"][option_index]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_questions = data.get("total_questions", 0) + 1
    correct_answers = data.get("correct_answers", 0)
    score = data.get("score", 0)

    if option["correct"]:
        score += 5
        correct_answers += 1
        await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +5 –±–∞–ª–ª–æ–≤")
    else:
        await callback.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")

    await state.update_data(score=score, correct_answers=correct_answers, total_questions=total_questions)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"üìù {option['response']}")

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if option["correct"]:
        user_id = callback.from_user.id
        user = await db.get_user_by_telegram_id_async(user_id)
        if user:
            await db.increment_user_score_async(user[0], 5)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
    next_part = current_part + 1
    if next_part < len(chapter["parts"]):
        await state.update_data(current_part=next_part)
        await asyncio.sleep(1)
        await send_chapter_content(callback.message, chapter, next_part, state)
    else:
        await finish_chapter(callback.message, state, chapter)


@dp.callback_query(F.data == "my_stats")
async def my_stats_callback(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await user_stats(callback.message)


@dp.callback_query(F.data == "about")
async def about_callback(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "üáπüá∑ –¢–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫ —Å –∫—É–ª—å—Ç—É—Ä–æ–π\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∏—Ç—å —Ç–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –∫—É–ª—å—Ç—É—Ä—É –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏.\n\n"
        "–í—ã –ø–æ—Å–µ—Ç–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞—Ç–∞—Ä—Å–∫—É—é –¥–µ—Ä–µ–≤–Ω—é, –≥–¥–µ –±—É–¥–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –º–µ—Å—Ç–Ω—ã–º–∏ –∂–∏—Ç–µ–ª—è–º–∏, "
        "—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.\n\n"
        "–ü—Ä–æject —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ø—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –∫—É–ª—å—Ç—É—Ä—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_main_menu")]
        ])
    )


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("stats"))
async def user_stats(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user_by_telegram_id_async(user_id)

    if user:
        stats = await db.get_user_stats_async(user_id)
        if stats:
            response = (f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                        f"‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: {stats['total_score']}\n"
                        f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ñ—Ä–∞–∑: {stats.get('phrases_learned', 0)}\n"
                        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats.get('correct_answers', 0)}\n"
                        f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats.get('total_questions', 0)}\n\n"
                        f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
            await message.answer(response)
        else:
            await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
@dp.message(F.text)
async def handle_text(message: types.Message, state: FSMContext):
    text = message.text.lower()
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è
    if current_state == DayScenario.waiting_for_answer or current_state == DayScenario.waiting_text_response:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="show_main_menu")]
        ])
        await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=keyboard)
        return

    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    if any(word in text for word in ['—Ä”ô—Ö–º”ô—Ç', '—Ä–∞—Ö–º–µ—Ç', '—Å–ø–∞—Å–∏–±–æ', 'thanks', 'thank']):
        responses = [
            "–ó–∏–Ω“ª–∞—Ä! ”ò–π–±”ô—Ç —Å“Ø–∑–ª”ô—Ä–µ–≥–µ–∑ ”©—á–µ–Ω —Ä”ô—Ö–º”ô—Ç!",
            "–†”ô—Ö–º”ô—Ç! –¢–∞–≥—ã–Ω –¥–∞ —è“£–∞ —Ñ—Ä–∞–∑–ª–∞—Ä ”©–π—Ä”ô–Ω–µ—Ä–≥”ô —è—Ä–¥”ô–º –∏—Ç–µ–≥–µ–∑!",
            "–°–µ–∑–≥”ô –¥”ô —Ä”ô—Ö–º”ô—Ç! –¢–∞—Ç–∞—Ä —Ç–µ–ª–µ–Ω ”©–π—Ä”ô–Ω“Ø–¥”ô —É“£—ã—à–ª–∞—Ä —Ç–µ–ª–∏–º–µ–Ω!"
        ]
        await message.answer(random.choice(responses))
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="show_main_menu")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
        ])
        await message.answer(
            "–Ø –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –î–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DatabaseManager
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
